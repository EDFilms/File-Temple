// Copyright 2018 E*D Films. All Rights Reserved.

/**
 * fbxUnitySchema.cpp
 *
 * A collection of rules and conversion information for a SceneTrack
 * file that was saved int the Unity Exporter, to a the FbxExporter
 * 
 * @author  dotBunny <hello@dotbunny.com>
 * @version 1
 * @since	  1.0.0
 */

#include "fbxUnitySchema.h"

namespace SceneTrackFbx
{
  Schema MakeUnitySchema()
  {
    Schema schema = std::make_shared<SchemaT>();
    
    schema->makeClass("GameObject", Frequency::Dynamic, 100, SchemaClassType::GameObject)
      .Component("Name")
        .Kind(ST_KIND_NAMED)
        .Type<stStr>()
      .End()
      .Component("Layer")
        .Kind(ST_KIND_LAYER)
        .Type<s32>()
      .End()
      .Component("Transform")
        .Kind(ST_KIND_SPATIAL)
        .Type<u32>()
      .End()
      .Component("Visibility")
        .Kind(ST_KIND_INTENSITY)
        .Type<u8>()
        .NbElements(1)
      .End();

     schema->makeClass("Transform", Frequency::Dynamic, 101, SchemaClassType::Transform)
      .Component("LocalPosition")
        .Kind(ST_KIND_POSITION)
        .Type<f32>()
        .NbElements(3)
        .Reference(Reference::Local)
      .End()
      .Component("LocalRotation")
        .Kind(ST_KIND_ROTATION)
        .Type<f32>()
        .NbElements(4)
        .Units(Units::Unspecified)
        .Reference(Reference::Local)
      .End()
      .Component("LocalScale")
        .Kind(ST_KIND_SCALE)
        .Type<f32>()
        .NbElements(3)
        .Reference(Reference::Local)
      .End()
      .Component("Parent")
        .Kind(ST_KIND_PARENT)
        .Type<u32>()
      .End();

     schema->makeClass("StandardMeshRenderer", Frequency::Dynamic, 102, SchemaClassType::StandardMeshRenderer)
       .Component("Materials")
        .Kind(ST_KIND_SURFACE)
        .Type<u32>()
        .NbElements(1) 
        .ArrayCapacity(8)
       .End()
       .Component("Mesh")
        .Kind(ST_KIND_GEOMETRY)
        .Type<u32>()
        .NbElements(1)
        .ArrayCapacity(1)
       .End()
       .Component("Parent")
         .Kind(ST_KIND_PARENT)
         .Type<u32>()
       .End();
     

     schema->makeClass("SkinnedMeshRenderer", Frequency::Dynamic, 103, SchemaClassType::SkinnedMeshRenderer)
       .Component("Materials")
        .Kind(ST_KIND_SURFACE)
        .Type<u32>()
        .NbElements(1) 
        .ArrayCapacity(8)
       .End()
       .Component("Mesh")
        .Kind(ST_KIND_GEOMETRY)
        .Type<u32>()
        .NbElements(1)
        .ArrayCapacity(1)
       .End()
       .Component("Bones")
        .Kind(ST_KIND_BONE)
        .Type<u32>()
        .NbElements(1)
        .ArrayCapacity(INT_MAX)
       .End()
       .Component("Parent")
         .Kind(ST_KIND_PARENT)
         .Type<u32>()
       .End()
       .Component("BoneTransform")
          .Kind(ST_KIND_BONE_BEGIN)
          .Type<u32>()
       .End();

     schema->makeClass("Mesh", Frequency::Static, 201, SchemaClassType::Mesh)
       .Component("Name")
         .Kind(ST_KIND_NAMED)
         .Type<stStr>()
       .End()
       .Component("Vertices")
         .Kind(ST_KIND_VERTEX)
         .Type<f32>()
         .NbElements(3)
         .ArrayCapacity(1 << 16)
         .Reference(Reference::Local)
       .End()
       .Component("Normals")
         .Kind(ST_KIND_NORMAL)
         .Type<f32>()
         .NbElements(3)
         .ArrayCapacity(1 << 16)
       .End()
       .Component("Tangents")
         .Kind(ST_KIND_TANGENT)
         .Type<f32>()
         .NbElements(4)
         .ArrayCapacity(1 << 16)
       .End()
       .Component("Colors")
         .Kind(ST_KIND_COLOR)
         .Type<f32>()
         .NbElements(4)
         .ArrayCapacity(1 << 16)
       .End()
       .Component("Uv")
         .Kind(ST_KIND_UV_0)
         .Type<f32>()
         .NbElements(2)
         .ArrayCapacity(1 << 16)
        .End()
       .Component("Uv2")
         .Kind(ST_KIND_UV_1)
         .Type<f32>()
         .NbElements(2)
         .ArrayCapacity(1 << 16)
       .End()
       .Component("Uv3")
         .Kind(ST_KIND_UV_2)
         .Type<f32>()
         .NbElements(2)
         .ArrayCapacity(1 << 16)
       .End()
       .Component("Uv4")
         .Kind(ST_KIND_UV_3)
         .Type<f32>()
         .NbElements(2)
         .ArrayCapacity(1 << 16)
       .End()
       .Component("BoneWeight.Weight")
         .Kind(ST_KIND_BONE_WEIGHT)
         .Type<f32>()
         .NbElements(4)
         .ArrayCapacity(1 << 16)
       .End()
       .Component("BoneWeight.Index")
         .Kind(ST_KIND_BONE_INDEX)
         .Type<u8>()
         .NbElements(4)
         .ArrayCapacity(1 << 16)
       .End()
       .Component("BindPoses")
        .Kind(ST_KIND_POSE)
        .Type<f32>()
        .NbElements(16)
        .ArrayCapacity(INT_MAX)
       .End()
       .Component("Bounds")
         .Kind(ST_KIND_SIZE)
         .Type<u32>()
         .NbElements(3)
         .ArrayCapacity(2)
         .Reference(Reference::Local)
       .End()
       .Component("SubMesh")
         .Kind(ST_KIND_GEOMETRY)
         .Type<u32>()
         .NbElements(1)
         .ArrayCapacity(8)
       .End();

     schema->makeClass("SubMesh", Frequency::Static, 202, SchemaClassType::SubMesh)
       .Component("Indexes")
        .Kind(ST_KIND_INDEX)
        .Type<u32>()
        .NbElements(1)
        .ArrayCapacity(1 << 16)
       .End();

     schema->makeClass("Material", Frequency::Static, 203, SchemaClassType::Material)
       .Component("Name")
         .Kind(ST_KIND_NAMED)
         .Type<stStr>()
       .End()
       .Component("Shader")
         .Kind(ST_KIND_SURFACE)
         .Type<stStr>()
       .End()
       .Component("MainTexture")
         .Kind(ST_KIND_IMAGE)
         .Type<stStr>()
       .End()
       .Component("Color")
         .Kind(ST_KIND_COLOR)
         .Type<f32>()
         .NbElements(3)
       .End()
       .Component("Specular")
         .Kind(ST_KIND_SPECULAR)
         .Type<f32>()
         .NbElements(3)
       .End()
       .Component("Emissive")
         .Kind(ST_KIND_EMISSIVE)
         .Type<f32>()
         .NbElements(3)
       .End()
       .Component("Transparency")
        .Kind(ST_KIND_TRANSPARENCY)
        .Type<f32>()
       .End()
       .Component("Reflection")
        .Kind(ST_KIND_REFLECTION)
        .Type<f32>()
       .End();

     return schema;
  }
}
